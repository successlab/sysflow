package sysflow_controller;

class OperationType {
	public static final byte UNKOWNN = 0x01;
	public static final byte NOT = 0x02;
	public static final byte AND = 0x03;
	public static final byte OR = 0x04;
	public static final byte LEQ = 0x05;
	public static final byte EQUAL = 0x06;
	public static final byte GEQ = 0x07;
}

class file_id{
	int uuid;
	int inode_num;
}

class header{
	byte type; /* Type of sysflow message */
	short length; /* Length including this sfp_header. */
	int xid; /* Transaction id associated with this message */
	
	byte getType(){
		return this.type;
	}
	
	short getLength(){
		return this.length;
	}
}

class sfp_match_type{
	int SFP_MATCH_PID = 0;
	int SFP_MATCH_NAME = 1;
	int SFP_MATCH_REGEX = 2;
};


//TODO: add more attributes for host information
class host_info{
	int host_id;
	byte os_type;
	byte core_num;
}

class sfp_match{
	int src_len;
	int src_type;
	
	//src id
	int pid;
	char[] src_name;
	
	int dst_len;
	int dst_type;
	
	//dst id
	file_id fid;
	char[] dst_name;
	
	//mask for 3-tuple(src, dst, opcode), TODO: finer-grained definition
	int mask;	
	int opcode;
	
}

class sfp_action{
    int type;
    int len;		//the total length of sysflow action
    byte[] data;	//The length is inferred from the length field.
};

public class sysflow_protocol {
	
	/*sysflow message type*/
	private static byte SFP_HELLO = 0;
	private static byte SFP_INFO_REQUEST = 1;
	private static byte SFP_INFO_REPLY = 2;
	private static byte SFP_FLOW_MOD = 3;
	private static byte SFP_FLOW_STATE_REQUEST = 4;
	private static byte SFP_FLOW_STATE_REPORT = 5;
	
	/*sysflow flow mod type*/
	private static int 	SFPFM_ADD = 0;
	private static int	SFPFM_REMOVE = 1;
	private static int	SFPFM_UPDATE = 2;
	
	/*sysflow messages*/
	class sysflow_hello{
		header hdr;
		
		public void sysflow_hello(){
			hdr.type = SFP_HELLO;
		}
	}
	
	class sfp_info_request{
		header hdr;
		
		public void sfp_info_request(){
			hdr.type = SFP_INFO_REQUEST;
		}
	}
	
	class sfp_info_reply{
		header hdr;
		host_info info;
		
		public void sfp_info_reply(){
			hdr.type = SFP_INFO_REPLY;
		}
	}
	
	class sfp_flow_mod{
		header hdr;
		
		sfp_match match;
		
		int type;
		int priority;
		
		int action_len;
		sfp_action[] actions;
		
	}
	
	class sfp_flow_stats_request{
		header hdr;
		
		sfp_match match;
	}
	
	class sfp_flow_stats_reply{
		header hdr;
		
		sfp_match match;
		int event_count;
		int byte_count;
		
		//TODO:add more meta-data
	}
	
	
	

	
	
	
}
