package sysflow_controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.util.Arrays;

public class sf_action implements Cloneable, Serializable {
	int action_type;
	int len;
	byte[] action_code;	/*parameters for sysflow action if necessary*/
	
	//sysflow action type
	private static final int 		SYSFLOW_ACTION_UNKOWN = 0;
	private static final int		SYSFLOW_ACTION_ALLOW = 1; 		
	private static final int 	    SYSFLOW_ACTION_DENY = 2; 		
	private static final int 	    SYSFLOW_ACTION_REDIRECT = 3; 		
	private static final int 	    SYSFLOW_ACTION_QRAUNTINE = 4;	
	private static final int 	    SYSFLOW_ACTION_TAG = 5; 		
	private static final int 	    SYSFLOW_ACTTION_ISOLATION = 6;
	private static final int 	    SYSFLOW_ACTION_MIGRATION = 7;
	private static final int 	    SYSFLOW_ACTION_LOG = 8; 
	private static final int 	    SYSFLOW_ACTION_ALERT = 9; 
	private static final int 	    SYSFLOW_ACTION_MESSAGE = 10; 
	private static final int 	    SYSFLOW_ACTION_NEXTMODULE = 11;
	
	public sf_action(int type, byte[] par, int par_len){
		this.action_type = type;
		this.len = par_len + Integer.SIZE * 2;
		
		//TODO: add exception handling
		if (par == null || par_len == 0){
			return;
		}
				
		this.action_code = Arrays.copyOf(par, par_len);
	}
	
	public int getLength(){
		return this.len;
	}
	
	public  byte[] serialize() throws IOException {
		ByteArrayOutputStream out = new ByteArrayOutputStream(this.len);
		
		out.write(this.action_type);
		out.write(this.len);
		out.write(this.action_code);
	   
		return out.toByteArray();
	}
}