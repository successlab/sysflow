package sysflow_controller.test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.logging.Logger;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.TimeZone;

import sysflow_controller.sf_action;
import sysflow_controller.sf_type_message;

/**
 * Represents the Flow Status Request message. This is the
 * java form of the message.
 */

public class FlowStatsReplyMessage extends Message {

	int src_type;
	int src_len;
	
	//src id (use 20 bytes to store)
	int pid;
	char[] src_name = null;
	
	int dst_type;
	int dst_len;
	
	//dst id (use 20 bytes to store)
	int uuid;
	int inode_num;
	char[] dst_name = null;
	
	//mask for 3-tuple(src, dst, opcode), TODO: finer-grained definition
	int mask;	
	int opcode;
	
	//TODO: add meta-data for host module stats
	int event_count;
	int byte_count;
	
	public FlowStatsReplyMessage(int mask, int opcode){
		this.type = sf_type_message.SFP_FLOW_MOD;
		this.xid = 0;
		
		this.mask = mask;
		this.opcode = opcode;
		
		src_name = new char[20];
		dst_name = new char[20];
		
		this.len = this.length();
	}
	
    @Override
    public String toString() {
        return "Flow Modification Message";
    }
    
	@Override
	public int length() {
		int len = 0;
		
		//add the header length 
		len += 3 * Integer.BYTES;
		
		//add the source entity
		len += 3 * Integer.BYTES + 10 * Character.BYTES;
		
		//add the destination entity
		len += 4 * Integer.BYTES + 10 * Character.BYTES;
		
		//add the mask and opcode
		len += 2 * Integer.BYTES;
	
		return len;
	}
	
	public void setSource(int src_type, int src_len, int pid, char[] name){
		this.src_type = src_type;
		this.src_len = src_len;
		
		this.pid = pid;
		
		//TODO: add exception handling
		if (name == null){
			return;
		}
		
		this.src_name = Arrays.copyOf(name, 20);
	}
	
	public void setDestination(int dst_type, int dst_len, int uuid, int inode, char[] name){
		type = sf_type_message.SFP_FLOW_MOD;
		
		this.dst_type = dst_type;
		this.dst_len = dst_len;
		
		this.uuid = uuid;
		this.inode_num = inode;
		
		//TODO: add exception handling
		if (name == null){
			return;
		}
				
		this.dst_name = Arrays.copyOf(name, 20);
	}

    /** converts the raw message into this message object */
    public void fromBytes(ByteBuffer buffer) {
    	this.len = buffer.getInt(0);
    	this.type = buffer.getInt(4);
    	this.xid = buffer.getInt(8);
    	
    	this.src_type = buffer.getInt(12);
    	this.src_len = buffer.getInt(16);
    	this.pid = buffer.getInt(20);
    	byte[] srcName = new byte[20];
    	this.src_name = buffer.get(dst, offset, length)
    }
    
    /** converts the message into raw bytes. 
     * @throws IOException */
    public void toBytes(ByteBuffer buffer) throws IOException {
        bytesToMsg(buffer, this.serialize());
    }
    
    public  byte[] serialize() throws IOException {
		ByteArrayOutputStream out = new ByteArrayOutputStream( );
		
		out.write(super.serialize());
		
		out.write(intToByteArray(this.src_type));
		out.write(intToByteArray(this.src_len));
		out.write(intToByteArray(this.pid));
		byte[] srcName = new byte[20];
		for (int i = 0; i < 20; i++) {
			srcName[i] = (byte) src_name[i];
		}
		out.write(srcName);
		
		out.write(intToByteArray(this.dst_type));
		out.write(intToByteArray(this.dst_len));
		out.write(intToByteArray(this.uuid));
		out.write(intToByteArray(this.inode_num));
		byte[] dstName = new byte[20];
		for (int i = 0; i < 20; i++) {
			srcName[i] = (byte) dst_name[i];
		}
		out.write(dstName);
		
		out.write(intToByteArray(this.mask));
		out.write(intToByteArray(this.opcode));
		
		return out.toByteArray();
	}


}